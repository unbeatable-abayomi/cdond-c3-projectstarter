version: 2.1

parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID:0:7}'


commands:

  install-awscli:
    description: Install aws cli
    steps:
      - run:
          name: Install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install-nodejs:
    description: Install Nodejs
    steps:
      - run:
          name: Install Nodejs
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs        
  install-ansible: 
      description: Install Ansible
      steps:
        - run:
            name: Install Ansible
            command: |
              sudo apt update
              sudo apt install software-properties-common -y
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              sudo apt install ansible -y 

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:  
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/4UzgenYeUmr2wVT6TfWpgL/migration_<<parameters.workflow_id>>")
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run Frontend Test
          command: |
            cd frontend
            npm install
            npm run test  
    
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend Test
          command: |
            cd backend
            npm install
            npm run test 
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Analyse Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit  --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
     

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Analyse Backend 
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit  --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name:  Install dependencies
          command: |
             yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople          
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              cd .circleci/ansible
              cat inventory.txt
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
              cat inventory.txt
            # echo $(aws ec2 describe-instances \
            # --query 'Reservations[*].Instances[*].PublicIpAddress' \
            # --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            # --output text) >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  configure-infrastructure:
    docker:
       - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '37:e3:1c:4d:49:28:77:14:89:09:1c:09:43:bd:4b:5b'
      - attach_workspace:
           at: ~/
      
      - install-ansible
      - install-awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully"  ~/project/backend/migrations_dump.txt   
            then
              curl --insecure https://kvdb.io/4UzgenYeUmr2wVT6TfWpgL/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d "1"
            
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "37:e3:1c:4d:49:28:77:14:89:09:1c:09:43:bd:4b:5b"
      - attach_workspace:
          at: ~/
      - install-nodejs
      - install-awscli
      - install-ansible
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=  ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  # deploy-frontend:
  #   docker:
  #     - image: python:3.7-alpine3.16
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache tar gzip nodejs npm aws-cli
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL = ${API_URL}"
  #           echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
   
                    
  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.16
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - '37:e3:1c:4d:49:28:77:14:89:09:1c:09:43:bd:4b:5b'
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
  #     # - attach_workspace:
  #     #     at: ~/
  #     - restore_cache:
  #         keys: [backend-build]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #           cd ..
  #           tar -C backend -czvf artifact.tar.gz .
  #           mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
  #           mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
  #           cd .circleci/ansible
  #           echo "Contents of the inventory.txt file is ------$(cat inventory.txt)"
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure  
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "37:e3:1c:4d:49:28:77:14:89:09:1c:09:43:bd:4b:5b"
      - attach_workspace:
          at: ~/
      - install-nodejs
      - install-awscli
      - install-ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..

            cd .circleci/ansible
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../

            echo "Contents of the inventory.txt: "
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      - revert-migrations

  # smoke-test:
  #   docker:
  #     - image: cimg/base:stable 
  #   steps:
  #     - checkout

  #     - install-nodejs
  #     - install-awscli
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           BACKEND_IP=$(aws ec2 describe-instances \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --output text
  #           )
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo ${BACKEND_IP}
  #           echo backend-${CIRCLE_WORKFLOW_ID:0:7}
  #           echo  ${API_URL}
  #           if curl -s $API_URL/api/status | grep "ok"
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
  #           echo $FRONTEND_WEBSITE
  #           if curl -s $FRONTEND_WEBSITE | grep "Welcome"
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi
  #     - destroy-environment
  #     - revert-migrations

  smoke-test:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout

      - install-nodejs
      - install-awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo ${BACKEND_IP}
            echo backend-${CIRCLE_WORKFLOW_ID:0:7}
            echo  ${API_URL}
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            echo $FRONTEND_WEBSITE
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations
  # smoke-test:
  #   docker:
  #     - image: python:3.7-alpine3.16
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache curl aws-cli nodejs npm
  #     # - attach_workspace:
  #     #     at: ~/
  #     - run:
  #         name: Backend smoke test
  #         command: |
  #           # export BACKEND_IP=$(tail ~/project/.circleci/ansible/inventory.txt)
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
  #           --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo $API_URL
  #           if curl --connect-timeout 5 "${API_URL}/api/status" | grep "ok"; then return 0; else return 0; fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
  #           echo $URL
  #           if curl ${URL} | grep "Welcome"; then return 0; else return 1; fi
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     # Here's where you will add some code to rollback on failure

  
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies / Save Old workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "Old Workflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/4UzgenYeUmr2wVT6TfWpgL/old_workflow_id -d "$OLD_WORKFLOW_ID"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --stack-name InitialStack
      - destroy-environment
      - revert-migrations
  # cloudfront-update:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt install -y tar gzip curl
  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           unzip -qq awscliv2.zip
  #           sudo ./aws/install
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation list-exports \
  #           --query "Exports[?Name==\`WorkflowID\`].Value" \
  #           --no-paginate --output text)
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --stack-name InitialStack \
  #           --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
  #           --tags project=udapeople
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Get old stack workflow id and remove stacks
  #         command: |
  #           echo <<pipeline.parameters.workflow_id>>
  #           export OldWorkflowID=<<pipeline.parameters.workflow_id>>
  #           export STACKS=$(aws cloudformation list-stacks \
  #           --query "StackSummaries[*].StackName" \
  #           --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             # echo "----------cleaning up stacks sure------------"
  #             # aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #             # aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #             # aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #           fi
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             # your code here
  #           fi

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      - run:
          name: Fetch old stack workflow id
          command: |
           export STACKS=($(aws cloudformation list-stacks \ 
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
           echo Stack names: "${STACKS[@]}"
           export OldWorkflowID=$(curl --Insecure https://kvdb.io/4UzgenYeUmr2wVT6TfWpgL/old_workflow_id)
           echo Old Workflow ID: $OldWorkflowID
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl --Insecure https://kvdb.io/4UzgenYeUmr2wVT6TfWpgL/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID
            echo currentWorkFowId: ${CIRCLE_WORKFLOW_ID:0:7}
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
            echo "-------------------Delete Confirmed-----------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              else
                 echo "-------------------Cannot Cleaup-------------------"
            fi          

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]  
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]